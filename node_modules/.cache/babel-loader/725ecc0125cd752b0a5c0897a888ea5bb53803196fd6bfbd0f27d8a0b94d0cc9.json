{"ast":null,"code":"// services/api.js\n// Simulación de API local - Solo React\n\n// Datos locales - Simulación de API\nconst getLocalProducts = () => {\n  return [\n  // Botas\n  {\n    id: 1,\n    name: 'Botas de Montaña',\n    description: 'Botas resistentes para senderismo y montaña con suela antideslizante.',\n    price: 89.99,\n    image: '/img/botas/img01.png',\n    category: 'Botas',\n    stock: 15\n  }, {\n    id: 2,\n    name: 'Botas Casuales',\n    description: 'Botas elegantes para uso diario con diseño moderno.',\n    price: 65.50,\n    image: '/img/botas/img02.png',\n    category: 'Botas',\n    stock: 20\n  }, {\n    id: 3,\n    name: 'Botas de Trabajo',\n    description: 'Botas resistentes para trabajo pesado con protección reforzada.',\n    price: 120.00,\n    image: '/img/botas/img03.png',\n    category: 'Botas',\n    stock: 8\n  }, {\n    id: 4,\n    name: 'Botas de Cuero',\n    description: 'Botas de cuero genuino con acabado premium.',\n    price: 150.75,\n    image: '/img/botas/img04.png',\n    category: 'Botas',\n    stock: 12\n  }, {\n    id: 5,\n    name: 'Botas Deportivas',\n    description: 'Botas ligeras para actividades deportivas.',\n    price: 75.25,\n    image: '/img/botas/img05.png',\n    category: 'Botas',\n    stock: 18\n  }, {\n    id: 6,\n    name: 'Botas de Invierno',\n    description: 'Botas térmicas para climas fríos con aislamiento.',\n    price: 95.80,\n    image: '/img/botas/img06.png',\n    category: 'Botas',\n    stock: 10\n  }, {\n    id: 7,\n    name: 'Botas Urbanas',\n    description: 'Botas modernas para el día a día en la ciudad.',\n    price: 68.90,\n    image: '/img/botas/img07.png',\n    category: 'Botas',\n    stock: 25\n  }, {\n    id: 8,\n    name: 'Botas de Seguridad',\n    description: 'Botas con puntera de acero para máxima protección.',\n    price: 110.45,\n    image: '/img/botas/img08.png',\n    category: 'Botas',\n    stock: 6\n  },\n  // Zapatillas\n  {\n    id: 9,\n    name: 'Zapatillas Running',\n    description: 'Zapatillas ligeras para correr con tecnología de amortiguación.',\n    price: 85.99,\n    image: '/img/zapatillas/img09.png',\n    category: 'Zapatillas',\n    stock: 30\n  }, {\n    id: 10,\n    name: 'Zapatillas Casual',\n    description: 'Zapatillas cómodas para uso diario con estilo urbano.',\n    price: 55.50,\n    image: '/img/zapatillas/img10.png',\n    category: 'Zapatillas',\n    stock: 40\n  }, {\n    id: 11,\n    name: 'Zapatillas Deportivas',\n    description: 'Zapatillas versátiles para múltiples deportes.',\n    price: 70.25,\n    image: '/img/zapatillas/img11.png',\n    category: 'Zapatillas',\n    stock: 35\n  }, {\n    id: 12,\n    name: 'Zapatillas de Baloncesto',\n    description: 'Zapatillas especializadas para baloncesto con máximo agarre.',\n    price: 125.00,\n    image: '/img/zapatillas/img12.png',\n    category: 'Zapatillas',\n    stock: 15\n  }, {\n    id: 13,\n    name: 'Zapatillas de Fútbol',\n    description: 'Zapatillas con tacos para fútbol en césped natural.',\n    price: 90.75,\n    image: '/img/zapatillas/img13.png',\n    category: 'Zapatillas',\n    stock: 20\n  }, {\n    id: 14,\n    name: 'Zapatillas Minimalistas',\n    description: 'Zapatillas ligeras con diseño minimalista.',\n    price: 60.80,\n    image: '/img/zapatillas/img14.png',\n    category: 'Zapatillas',\n    stock: 28\n  }, {\n    id: 15,\n    name: 'Zapatillas de Skate',\n    description: 'Zapatillas resistentes para skateboarding.',\n    price: 75.45,\n    image: '/img/zapatillas/img15.png',\n    category: 'Zapatillas',\n    stock: 22\n  }, {\n    id: 16,\n    name: 'Zapatillas de Trail',\n    description: 'Zapatillas para senderismo con suela antideslizante.',\n    price: 95.60,\n    image: '/img/zapatillas/img16.png',\n    category: 'Zapatillas',\n    stock: 18\n  }];\n};\n\n// Servicios simulados - Solo React\nexport const productService = {\n  getAll: async (params = {}) => {\n    // Simular delay de API\n    await new Promise(resolve => setTimeout(resolve, 300));\n    let products = getLocalProducts();\n\n    // Filtrar por categoría\n    if (params.category && params.category !== 'all') {\n      products = products.filter(p => p.category.toLowerCase() === params.category.toLowerCase());\n    }\n\n    // Buscar por texto\n    if (params.search) {\n      const searchTerms = params.search.toLowerCase().split(/\\s+/);\n      products = products.filter(product => {\n        const productName = product.name.toLowerCase();\n        return searchTerms.every(term => productName.includes(term));\n      });\n    }\n    return {\n      success: true,\n      data: products,\n      count: products.length\n    };\n  },\n  getById: async id => {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const product = getLocalProducts().find(p => p.id === parseInt(id));\n    if (!product) {\n      throw new Error('Producto no encontrado');\n    }\n    return {\n      success: true,\n      data: product\n    };\n  },\n  getByCategory: async category => {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    const products = getLocalProducts().filter(p => p.category.toLowerCase() === category.toLowerCase());\n    return {\n      success: true,\n      data: products,\n      category: category,\n      count: products.length\n    };\n  },\n  search: async query => {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    const searchTerms = query.toLowerCase().split(/\\s+/);\n    const products = getLocalProducts().filter(product => {\n      const productName = product.name.toLowerCase();\n      return searchTerms.every(term => productName.includes(term));\n    });\n    return {\n      success: true,\n      data: products,\n      count: products.length\n    };\n  },\n  getCategories: async () => {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const categories = ['Botas', 'Zapatillas'].map(category => ({\n      id: category.toLowerCase(),\n      name: category\n    }));\n    return {\n      success: true,\n      data: categories\n    };\n  }\n};\n\n// Simulación de pedidos\nexport const orderService = {\n  create: async orderData => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Simular creación de pedido\n    const order = {\n      id: Date.now(),\n      order_number: `ORD-${Date.now()}`,\n      ...orderData,\n      status: 'pending',\n      created_at: new Date().toISOString()\n    };\n    return {\n      success: true,\n      message: 'Pedido creado correctamente',\n      data: {\n        order\n      }\n    };\n  },\n  simulatePayment: async (orderId, paymentData) => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Simular diferentes escenarios de pago\n    const scenarios = [{\n      success: true,\n      message: 'Pago procesado exitosamente',\n      probability: 0.95\n    }, {\n      success: false,\n      message: 'Fondos insuficientes',\n      probability: 0.03\n    }, {\n      success: false,\n      message: 'Tarjeta rechazada',\n      probability: 0.02\n    }];\n    const random = Math.random();\n    let cumulative = 0;\n    let result = scenarios[0];\n    for (const scenario of scenarios) {\n      cumulative += scenario.probability;\n      if (random <= cumulative) {\n        result = scenario;\n        break;\n      }\n    }\n    if (result.success) {\n      return {\n        success: true,\n        message: result.message,\n        data: {\n          transaction_id: `TXN-${Date.now()}`,\n          order_number: `ORD-${orderId}`\n        }\n      };\n    } else {\n      return {\n        success: false,\n        message: result.message\n      };\n    }\n  },\n  getPaymentMethods: async () => {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return {\n      success: true,\n      data: [{\n        id: 'card',\n        name: 'Tarjeta de Crédito/Débito',\n        icon: 'credit-card',\n        description: 'Visa, Mastercard, American Express'\n      }, {\n        id: 'paypal',\n        name: 'PayPal',\n        icon: 'paypal',\n        description: 'Paga con tu cuenta PayPal'\n      }]\n    };\n  }\n};\n\n// Simulación de salud de API\nexport const healthService = {\n  check: async () => {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    return {\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      version: '1.0.0',\n      message: 'API simulada funcionando correctamente'\n    };\n  }\n};","map":{"version":3,"names":["getLocalProducts","id","name","description","price","image","category","stock","productService","getAll","params","Promise","resolve","setTimeout","products","filter","p","toLowerCase","search","searchTerms","split","product","productName","every","term","includes","success","data","count","length","getById","find","parseInt","Error","getByCategory","query","getCategories","categories","map","orderService","create","orderData","order","Date","now","order_number","status","created_at","toISOString","message","simulatePayment","orderId","paymentData","scenarios","probability","random","Math","cumulative","result","scenario","transaction_id","getPaymentMethods","icon","healthService","check","timestamp","version"],"sources":["C:/Users/Estefania/Desktop/ESTEFANIA/proyectosdev/footlily/src/services/api.js"],"sourcesContent":["// services/api.js\r\n// Simulación de API local - Solo React\r\n\r\n// Datos locales - Simulación de API\r\nconst getLocalProducts = () => {\r\n  return [\r\n    // Botas\r\n    { id: 1, name: 'Botas de Montaña', description: 'Botas resistentes para senderismo y montaña con suela antideslizante.', price: 89.99, image: '/img/botas/img01.png', category: 'Botas', stock: 15 },\r\n    { id: 2, name: 'Botas Casuales', description: 'Botas elegantes para uso diario con diseño moderno.', price: 65.50, image: '/img/botas/img02.png', category: 'Botas', stock: 20 },\r\n    { id: 3, name: 'Botas de Trabajo', description: 'Botas resistentes para trabajo pesado con protección reforzada.', price: 120.00, image: '/img/botas/img03.png', category: 'Botas', stock: 8 },\r\n    { id: 4, name: 'Botas de Cuero', description: 'Botas de cuero genuino con acabado premium.', price: 150.75, image: '/img/botas/img04.png', category: 'Botas', stock: 12 },\r\n    { id: 5, name: 'Botas Deportivas', description: 'Botas ligeras para actividades deportivas.', price: 75.25, image: '/img/botas/img05.png', category: 'Botas', stock: 18 },\r\n    { id: 6, name: 'Botas de Invierno', description: 'Botas térmicas para climas fríos con aislamiento.', price: 95.80, image: '/img/botas/img06.png', category: 'Botas', stock: 10 },\r\n    { id: 7, name: 'Botas Urbanas', description: 'Botas modernas para el día a día en la ciudad.', price: 68.90, image: '/img/botas/img07.png', category: 'Botas', stock: 25 },\r\n    { id: 8, name: 'Botas de Seguridad', description: 'Botas con puntera de acero para máxima protección.', price: 110.45, image: '/img/botas/img08.png', category: 'Botas', stock: 6 },\r\n    \r\n    // Zapatillas\r\n    { id: 9, name: 'Zapatillas Running', description: 'Zapatillas ligeras para correr con tecnología de amortiguación.', price: 85.99, image: '/img/zapatillas/img09.png', category: 'Zapatillas', stock: 30 },\r\n    { id: 10, name: 'Zapatillas Casual', description: 'Zapatillas cómodas para uso diario con estilo urbano.', price: 55.50, image: '/img/zapatillas/img10.png', category: 'Zapatillas', stock: 40 },\r\n    { id: 11, name: 'Zapatillas Deportivas', description: 'Zapatillas versátiles para múltiples deportes.', price: 70.25, image: '/img/zapatillas/img11.png', category: 'Zapatillas', stock: 35 },\r\n    { id: 12, name: 'Zapatillas de Baloncesto', description: 'Zapatillas especializadas para baloncesto con máximo agarre.', price: 125.00, image: '/img/zapatillas/img12.png', category: 'Zapatillas', stock: 15 },\r\n    { id: 13, name: 'Zapatillas de Fútbol', description: 'Zapatillas con tacos para fútbol en césped natural.', price: 90.75, image: '/img/zapatillas/img13.png', category: 'Zapatillas', stock: 20 },\r\n    { id: 14, name: 'Zapatillas Minimalistas', description: 'Zapatillas ligeras con diseño minimalista.', price: 60.80, image: '/img/zapatillas/img14.png', category: 'Zapatillas', stock: 28 },\r\n    { id: 15, name: 'Zapatillas de Skate', description: 'Zapatillas resistentes para skateboarding.', price: 75.45, image: '/img/zapatillas/img15.png', category: 'Zapatillas', stock: 22 },\r\n    { id: 16, name: 'Zapatillas de Trail', description: 'Zapatillas para senderismo con suela antideslizante.', price: 95.60, image: '/img/zapatillas/img16.png', category: 'Zapatillas', stock: 18 }\r\n  ];\r\n};\r\n\r\n// Servicios simulados - Solo React\r\nexport const productService = {\r\n  getAll: async (params = {}) => {\r\n    // Simular delay de API\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    \r\n    let products = getLocalProducts();\r\n    \r\n    // Filtrar por categoría\r\n    if (params.category && params.category !== 'all') {\r\n      products = products.filter(p => p.category.toLowerCase() === params.category.toLowerCase());\r\n    }\r\n    \r\n    // Buscar por texto\r\n    if (params.search) {\r\n      const searchTerms = params.search.toLowerCase().split(/\\s+/);\r\n      products = products.filter(product => {\r\n        const productName = product.name.toLowerCase();\r\n        return searchTerms.every(term => productName.includes(term));\r\n      });\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      data: products,\r\n      count: products.length\r\n    };\r\n  },\r\n\r\n  getById: async (id) => {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const product = getLocalProducts().find(p => p.id === parseInt(id));\r\n    \r\n    if (!product) {\r\n      throw new Error('Producto no encontrado');\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      data: product\r\n    };\r\n  },\r\n\r\n  getByCategory: async (category) => {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    const products = getLocalProducts().filter(p => \r\n      p.category.toLowerCase() === category.toLowerCase()\r\n    );\r\n    \r\n    return {\r\n      success: true,\r\n      data: products,\r\n      category: category,\r\n      count: products.length\r\n    };\r\n  },\r\n\r\n  search: async (query) => {\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    const searchTerms = query.toLowerCase().split(/\\s+/);\r\n    const products = getLocalProducts().filter(product => {\r\n      const productName = product.name.toLowerCase();\r\n      return searchTerms.every(term => productName.includes(term));\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      data: products,\r\n      count: products.length\r\n    };\r\n  },\r\n\r\n  getCategories: async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const categories = ['Botas', 'Zapatillas'].map(category => ({\r\n      id: category.toLowerCase(),\r\n      name: category\r\n    }));\r\n    \r\n    return {\r\n      success: true,\r\n      data: categories\r\n    };\r\n  }\r\n};\r\n\r\n// Simulación de pedidos\r\nexport const orderService = {\r\n  create: async (orderData) => {\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Simular creación de pedido\r\n    const order = {\r\n      id: Date.now(),\r\n      order_number: `ORD-${Date.now()}`,\r\n      ...orderData,\r\n      status: 'pending',\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Pedido creado correctamente',\r\n      data: { order }\r\n    };\r\n  },\r\n\r\n  simulatePayment: async (orderId, paymentData) => {\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    // Simular diferentes escenarios de pago\r\n    const scenarios = [\r\n      { success: true, message: 'Pago procesado exitosamente', probability: 0.95 },\r\n      { success: false, message: 'Fondos insuficientes', probability: 0.03 },\r\n      { success: false, message: 'Tarjeta rechazada', probability: 0.02 }\r\n    ];\r\n    \r\n    const random = Math.random();\r\n    let cumulative = 0;\r\n    let result = scenarios[0];\r\n    \r\n    for (const scenario of scenarios) {\r\n      cumulative += scenario.probability;\r\n      if (random <= cumulative) {\r\n        result = scenario;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (result.success) {\r\n      return {\r\n        success: true,\r\n        message: result.message,\r\n        data: {\r\n          transaction_id: `TXN-${Date.now()}`,\r\n          order_number: `ORD-${orderId}`\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        success: false,\r\n        message: result.message\r\n      };\r\n    }\r\n  },\r\n\r\n  getPaymentMethods: async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    return {\r\n      success: true,\r\n      data: [\r\n        {\r\n          id: 'card',\r\n          name: 'Tarjeta de Crédito/Débito',\r\n          icon: 'credit-card',\r\n          description: 'Visa, Mastercard, American Express'\r\n        },\r\n        {\r\n          id: 'paypal',\r\n          name: 'PayPal',\r\n          icon: 'paypal',\r\n          description: 'Paga con tu cuenta PayPal'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n};\r\n\r\n// Simulación de salud de API\r\nexport const healthService = {\r\n  check: async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    return {\r\n      status: 'ok',\r\n      timestamp: new Date().toISOString(),\r\n      version: '1.0.0',\r\n      message: 'API simulada funcionando correctamente'\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}