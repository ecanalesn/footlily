{"ast":null,"code":"// services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst USE_LOCAL_DATA = true; // Cambiar a false cuando la API esté lista\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Métodos GET\n  async get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  }\n\n  // Métodos POST\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // Métodos PUT\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n\n  // Métodos DELETE\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n}\n\n// Instancia única del servicio\nconst apiService = new ApiService();\n\n// Servicios específicos\nexport const productService = {\n  getAll: (params = {}) => {\n    if (USE_LOCAL_DATA) {\n      // Usar datos locales mientras configuramos la API\n      return Promise.resolve({\n        success: true,\n        data: getLocalProducts()\n      });\n    }\n    const queryString = new URLSearchParams(params).toString();\n    const endpoint = queryString ? `/products?${queryString}` : '/products';\n    return apiService.get(endpoint);\n  },\n  getById: id => apiService.get(`/products/${id}`),\n  getByCategory: category => apiService.get(`/products/category/${category}`),\n  search: query => apiService.get(`/products?search=${encodeURIComponent(query)}`),\n  getCategories: () => apiService.get('/products/categories')\n};\nexport const orderService = {\n  create: orderData => apiService.post('/orders', orderData),\n  getById: id => apiService.get(`/orders/${id}`),\n  simulatePayment: (orderId, paymentData) => apiService.post(`/orders/${orderId}/simulate-payment`, paymentData),\n  getPaymentMethods: () => apiService.get('/payment-methods')\n};\nexport const healthService = {\n  check: () => apiService.get('/health')\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","USE_LOCAL_DATA","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","message","status","error","console","get","method","post","body","JSON","stringify","put","delete","apiService","productService","getAll","params","Promise","resolve","success","getLocalProducts","queryString","URLSearchParams","toString","getById","id","getByCategory","category","search","query","encodeURIComponent","getCategories","orderService","create","orderData","simulatePayment","orderId","paymentData","getPaymentMethods","healthService","check"],"sources":["C:/Users/Estefania/Desktop/ESTEFANIA/proyectosdev/footlily/src/services/api.js"],"sourcesContent":["// services/api.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\nconst USE_LOCAL_DATA = true; // Cambiar a false cuando la API esté lista\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Métodos GET\r\n  async get(endpoint) {\r\n    return this.request(endpoint, { method: 'GET' });\r\n  }\r\n\r\n  // Métodos POST\r\n  async post(endpoint, data) {\r\n    return this.request(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // Métodos PUT\r\n  async put(endpoint, data) {\r\n    return this.request(endpoint, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // Métodos DELETE\r\n  async delete(endpoint) {\r\n    return this.request(endpoint, { method: 'DELETE' });\r\n  }\r\n}\r\n\r\n// Instancia única del servicio\r\nconst apiService = new ApiService();\r\n\r\n// Servicios específicos\r\nexport const productService = {\r\n  getAll: (params = {}) => {\r\n    if (USE_LOCAL_DATA) {\r\n      // Usar datos locales mientras configuramos la API\r\n      return Promise.resolve({\r\n        success: true,\r\n        data: getLocalProducts()\r\n      });\r\n    }\r\n    const queryString = new URLSearchParams(params).toString();\r\n    const endpoint = queryString ? `/products?${queryString}` : '/products';\r\n    return apiService.get(endpoint);\r\n  },\r\n\r\n  getById: (id) => apiService.get(`/products/${id}`),\r\n\r\n  getByCategory: (category) => apiService.get(`/products/category/${category}`),\r\n\r\n  search: (query) => apiService.get(`/products?search=${encodeURIComponent(query)}`),\r\n\r\n  getCategories: () => apiService.get('/products/categories'),\r\n};\r\n\r\nexport const orderService = {\r\n  create: (orderData) => apiService.post('/orders', orderData),\r\n\r\n  getById: (id) => apiService.get(`/orders/${id}`),\r\n\r\n  simulatePayment: (orderId, paymentData) => \r\n    apiService.post(`/orders/${orderId}/simulate-payment`, paymentData),\r\n\r\n  getPaymentMethods: () => apiService.get('/payment-methods'),\r\n};\r\n\r\nexport const healthService = {\r\n  check: () => apiService.get('/health'),\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}